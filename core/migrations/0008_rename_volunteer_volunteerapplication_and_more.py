# Generated by Django 5.2.4 on 2025-08-13 13:54

from django.db import migrations, models
from django.utils.text import slugify


def populate_slugs(apps, schema_editor):
    Event = apps.get_model("core", "Event")
    Project = apps.get_model("core", "Project")

    def ensure_unique_slug(base_slug, used):
        """Retourne un slug unique en ajoutant -2, -3, ... si nécessaire."""
        slug = base_slug or ""
        if not slug:
            # fallback ultra-sûr si le titre est vide
            slug = "item"
        original = slug
        i = 2
        while slug in used:
            slug = f"{original}-{i}"
            i += 1
        used.add(slug)
        return slug

    # ----- Events -----
    used_event_slugs = set(
        Event.objects.exclude(slug__isnull=True).exclude(slug="").values_list("slug", flat=True)
    )
    for obj in Event.objects.all().order_by("id"):
        base = slugify(getattr(obj, "title", "") or "")
        unique = ensure_unique_slug(base, used_event_slugs)
        if obj.slug != unique:
            obj.slug = unique
            obj.save(update_fields=["slug"])

    # ----- Projects -----
    used_project_slugs = set(
        Project.objects.exclude(slug__isnull=True).exclude(slug="").values_list("slug", flat=True)
    )
    for obj in Project.objects.all().order_by("id"):
        base = slugify(getattr(obj, "title", "") or "")
        unique = ensure_unique_slug(base, used_project_slugs)
        if obj.slug != unique:
            obj.slug = unique
            obj.save(update_fields=["slug"])


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0007_delete_document"),
    ]

    operations = [
        # Rename Volunteer -> VolunteerApplication
        migrations.RenameModel(
            old_name="Volunteer",
            new_name="VolunteerApplication",
        ),

        # Meta orderings
        migrations.AlterModelOptions(
            name="contactmessage",
            options={"ordering": ["-date_sent"]},
        ),
        migrations.AlterModelOptions(
            name="event",
            options={"ordering": ["-date"]},
        ),
        migrations.AlterModelOptions(
            name="news",
            options={"ordering": ["-date"]},
        ),
        migrations.AlterModelOptions(
            name="project",
            options={"ordering": ["title"]},
        ),

        # 1) Ajouter slug nullable et NON unique
        migrations.AddField(
            model_name="event",
            name="slug",
            field=models.SlugField(max_length=220, blank=True, null=True),
        ),
        migrations.AddField(
            model_name="project",
            name="slug",
            field=models.SlugField(max_length=220, blank=True, null=True),
        ),

        # 2) Remplir les slugs pour les lignes existantes
        migrations.RunPython(populate_slugs, migrations.RunPython.noop),

        # 3) Rendre unique et non-null
        migrations.AlterField(
            model_name="event",
            name="slug",
            field=models.SlugField(max_length=220, unique=True, blank=True, null=False),
        ),
        migrations.AlterField(
            model_name="project",
            name="slug",
            field=models.SlugField(max_length=220, unique=True, blank=True, null=False),
        ),
    ]
